<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LL86</title>
    <description>Success means Do a little bit more every day</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 01 Jun 2018 15:21:00 +0800</pubDate>
    <lastBuildDate>Fri, 01 Jun 2018 15:21:00 +0800</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>Runtime 整理</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Objective-C 作为一门动态语言，其动态性就表现在利用运行时系统（runtime）来动态得创建类和对象、进行消息传递和转发。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;对于高级编程语言来说，想要成为可执行文件需要先编译为汇编语言再汇编为机器语言，机器语言也是计算机能够识别的唯一语言，但是OC并不能直接编译为汇编语言，而是要先转写为纯C语言再进行编译和汇编的操作，从OC到C语言的过渡就是由runtime来实现的。然而我们使用OC进行面向对象开发，而C语言更多的是面向过程开发，这就需要将面向对象的类转变为面向过程的结构体。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;&lt;/h2&gt;

&lt;p&gt;首先我们看下runtime中关于类(class)、对象(object)、方法(method)的结构体的组成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;

//对象
struct objc_object {
    Class isa  OBJC_ISA_AVAILABILITY;
};

//类
struct objc_class {
    Class isa  OBJC_ISA_AVAILABILITY;

#if !__OBJC2__

    Class super_class                                        OBJC2_UNAVAILABLE;
    const char *name                                         OBJC2_UNAVAILABLE;
    long version                                             OBJC2_UNAVAILABLE;
    long info                                                OBJC2_UNAVAILABLE;
    long instance_size                                       OBJC2_UNAVAILABLE;
    struct objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;
    struct objc_method_list **methodLists                    OBJC2_UNAVAILABLE;
    struct objc_cache *cache                                 OBJC2_UNAVAILABLE;
    struct objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;

#endif
} OBJC2_UNAVAILABLE;

//方法列表
struct objc_method_list {

    struct objc_method_list *obsolete                        OBJC2_UNAVAILABLE;
    int method_count                                         OBJC2_UNAVAILABLE;

#ifdef __LP64__

    int space                                                OBJC2_UNAVAILABLE;

#endif
    /* variable length structure */
    struct objc_method method_list[1]                        OBJC2_UNAVAILABLE;
    
}                                                            OBJC2_UNAVAILABLE;

//方法
struct objc_method {

    SEL method_name                                          OBJC2_UNAVAILABLE;
    char *method_types                                       OBJC2_UNAVAILABLE;
    IMP method_imp                                           OBJC2_UNAVAILABLE;
}

&lt;/code&gt;&lt;pre&gt;
&lt;/pre&gt;&lt;/pre&gt;
</description>
        <pubDate>Tue, 12 Sep 2017 23:15:06 +0800</pubDate>
        <link>http://localhost:4000/2017/09/Runtime-%E8%BF%90%E7%94%A8/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/09/Runtime-%E8%BF%90%E7%94%A8/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS 11 SDK新特性记录</title>
        <description>&lt;h3 id=&quot;arkit&quot;&gt;&lt;a href=&quot;https://developer.apple.com/documentation/arkit&quot;&gt;ARKit&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://dn-mhke0kuv.qbox.me/5600f4a9b69ce3fe99cf&quot; alt=&quot;AR&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还记得之前支付宝和QQ的AR红包活动，包括去年大火的Pokémon Go AR游戏面世，这项技术应用到iOS端，渐渐吸引了我们的目光。&lt;/p&gt;

&lt;p&gt;今年的WWDC现场的演示也向我们展示了这项技术可能良好前景，ARKit是一套并不很复杂的 API。涉及的 View 几乎是作为 SceneKit 的延伸，再加上在真实世界的定为也已经由系统帮助处理，开发者需要做的大抵就是将虚拟物体放在屏幕的合适位置，并让物体之间互动。而利用 Core ML 来对相机内的实际物体进行识别和交互，可以说也让各类特效的相机或者摄影 app 充满了想像空间。&lt;/p&gt;

&lt;p&gt;所以ARKit极大降低了普通开发者玩 AR 的门槛，也是 Apple 现阶段用来抗衡 VR 的选项。可以畅想一下更多类似 Pokémon Go 的 AR 游戏 (结合实境的虚拟宠物什么的大概是最容易想到的) 能在 ARKit 和 SceneKit 的帮助下面世，甚至在 iPad Pro 现有技能上做像是 AR 电影这样能全方位展示的多媒体可能也不再是单纯的梦想。&lt;/p&gt;

&lt;h3 id=&quot;core-ml&quot;&gt;&lt;a href=&quot;https://developer.apple.com/machine-learning/&quot;&gt;Core ML&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;使用 Core ML，可以将训练好的机器学习模型整合到你的应用中。简单来说就是使用大量已有的数据和正确的结果，来对建造的模型进行训练或改进，使模型具有实际的使用价值。比如一条街道的完全信息覆盖，训练模型可以看做是该街道所有店面、公共设施的数据信息（比如地理位置），通过大量的数据整合到训练模型中，你就可以通过简单的一些输入信息，来获取特定的输出结果。因此Core ML 所扮演的角色就是是将已经训练好的模型转换为 iOS 可以理解的形式，并且将新的数据“喂给”模型，从而获取输出。&lt;/p&gt;

&lt;p&gt;Core ML 在背后驱动了 iOS 的视觉识别的 Vision 框架和 Foundation 中的语义分析相关 API。普通开发者可以从这些高层的 API 中直接获益，比如人脸图片或者文字识别等。这部分内容在以前版本的 SDK 中也存在，不过在 iOS 11 SDK 中它们被集中到了新的框架中，并将一些更具体和底层的控制开放出来。比如你可以使用 Vision 中的高层接口，但是同时指定底层所使用的模型。这给 iOS 的计算机视觉带来了新的可能。这方面可以参考下&lt;a href=&quot;https://juejin.im/entry/5937d251a0bb9f005807c582&quot;&gt;这篇关于Core ML应用&lt;/a&gt;;&lt;/p&gt;

&lt;h3 id=&quot;小知识点&quot;&gt;小知识点&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/drag_and_drop&quot;&gt;拖拽 - Drag and Drop&lt;/a&gt; 
&lt;img src=&quot;https://docs-assets.developer.apple.com/published/d8a3490e51/5feafe54-90b2-4bd0-9593-3f0ea138df4c.png&quot; alt=&quot;drag in pad&quot; /&gt;
    &lt;ol&gt;
      &lt;li&gt;在具有分屏功能的pad中，该功能具有很好的表现力，而iPhone上，则只体现在单个应用程序中。&lt;/li&gt;
      &lt;li&gt;如原生支持拖拽的UITextView 和 UITextField，UICollectionView 和 UITableView的拖拽有一系列专用的 delegate 来表明拖拽的发生和结束。而你也可以对任意 UIView 子类定义拖拽行为。&lt;/li&gt;
      &lt;li&gt;和 mac 上的拖拽不同，iOS 的拖拽充分尊重了多点触控的屏幕，所以可能你需要对一次多个的拖拽行为做些特别处理。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2017/206/&quot;&gt;Auto Fill&lt;/a&gt; - UITextInputTraits 的 textContentType 中添加了 username 和 password，对适合的 textView 或者 textField 的 contentType 进行配置，就可以在要求输入用户名密码时获取键盘上方的自动填充，帮助用户快速登录，提供更友好的用户体验。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/fileprovider&quot;&gt;FileProvider&lt;/a&gt; 和 &lt;a href=&quot;https://developer.apple.com/documentation/fileprovider&quot;&gt;FileProviderUI&lt;/a&gt; - 开放了让其他应用程序访问由包含的应用程序存储和管理的文档和目录。
FileProviderUI则提供了一套类似Files app的界面，让你可以获取用户设备上或者云端的文件，具体还没测，读者可以亲自测试下试试。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不再支持 32 位 app - 虽然在 beta 1 中依然可以运行 32 位 app，但是 Apple 明确指出了将在后续的 iOS 11 beta 中取消支持。所以如果你想让自己的程序运行在 iOS 11 的设备上，进行 64 位的重新编译是必须步骤。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/devicecheck&quot;&gt;DeviceCheck&lt;/a&gt; - 每天要用广告 ID 追踪用户的开发者现在有了更好地选择 (当然前提是用来做正经事儿)。该FrameWork允许你通过你的服务器与 Apple 服务器通讯，并为单个设备设置两个 bit 的数据。简单说，你在设备上用 DeviceCheck API 生成一个 token，然后将这个 token 发给自己的服务器，再由自己的服务器与 Apple 的 API 进行通讯，来更新或者查询该设备的值。这两个 bit 的数据用来追踪用户比如是否已经领取奖励这类信息。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/pdfkit&quot;&gt;PDFKit&lt;/a&gt; - 这是一个在 macOS 上已经长期存在的框架，但却在 iOS 上姗姗来迟。你可以使用这个框架显示和操作 pdf 文件。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/identitylookup&quot;&gt;IdentityLookup&lt;/a&gt; - 可以自己开发一个 app extension 来拦截系统 SMS 和 MMS 的信息。系统的信息 app 在接到未知的人的短信时，会询问所有开启的过滤扩展，如果扩展表示该消息应当被拦截，那么这则信息将不会传递给你。扩展有机会访问到事先指定的 server 来进行判断 (所以说你可以光明正大地获取用户短信内容了，不过当然考虑到隐私，这些访问都是匿名加密的，Apple 也禁止这类扩展在 container 里进行写入)。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/corenfc&quot;&gt;Core NFC&lt;/a&gt; - 在 iPhone 7 和 iPhone 7 Plus 上提供基础的近场通讯读取功能。看起来很 promising，只要你有合适的 NFC 标签，手机就可以进行读取。但是考虑到无法后台常驻，实用性就打了折扣。不过笔者不是很熟这块，也许能有更合适的场景也未可知。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;xcode&quot;&gt;xcode&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;编辑器和编译器&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Xcode 9 中编辑器进行了重写，支持了对 Swift 代码的重构 (虽然还很基础)，将 VCS 提到了更重要的位置，并添加了 GitHub 集成，可以进行同局域网的无线部署和调试。
Xcode 9 中的索引系统也使用了新的引擎，据称在大型项目中搜索最高可以达到 50 倍的速度。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Named Color&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/6/6/7d2b28f4fafadf52b165dac094169dab&quot; alt=&quot;xcassets 里添加颜色&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 13 Jun 2017 02:15:06 +0800</pubDate>
        <link>http://localhost:4000/2017/06/iOS-11-SDK%E6%96%B0%E7%89%B9%E6%80%A7/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/06/iOS-11-SDK%E6%96%B0%E7%89%B9%E6%80%A7/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>react-native Mac-iOS 开发环境搭建</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;“Learn once, write anywhere”&lt;/em&gt; ，RN致力于在Javascript和React的基础上获得完全一致的开发体验，构建新型的原生APP.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react-native/docs/getting-started.html&quot;&gt;RN英文版&lt;/a&gt;和&lt;a href=&quot;http://reactnative.cn/docs/0.31/getting-started.html&quot;&gt;RN中文版&lt;/a&gt;，这是我的参考学习资源，下面将会分享下关于我RN的一些开发环境配置，欢迎小伙伴一起学习进步。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;dependencies-for-mac--ios&quot;&gt;Dependencies for Mac + iOS&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;xocde&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作为iOS开发者，相信小伙伴们最熟悉的IDE了，这个就不过多介绍了，需要的在App Store或是到Apple开发者官网上下载即可。需要注意的是React Native目前需要Xcode7.0 或更高版本。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Homebrew&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;（&lt;a href=&quot;https://www.zybuluo.com/phper/note/87055&quot;&gt;常用使用方法&lt;/a&gt;）, Mac系统的包管理器，能在Mac中方便的安装软件或者卸载软件，相当于linux下的apt-get、yum神器；Homebre可以在Mac上安装一些OS X没有的UNIX工具，Homebrew将这些工具统统安装到了 /usr/local/Cellar 目录中，并在 /usr/local/bin 中创建符号链接。这里我们用它来安装NodeJS和一些其他必需的工具软件，下面推荐自己在使用的配置，仅作参考。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Node&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用上面的Homebrew来安装&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt;，基于Chrome JavaScript 运行时建立的一个平台。关于&lt;a href=&quot;http://www.runoob.com/nodejs/nodejs-tutorial.html&quot;&gt;Node.js的资源学习&lt;/a&gt;，可自行参考.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install node
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;React Native的命令行工具（react-native-cli）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;React Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npminstall -g react-native-cli
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意：如果你看到EACCES: permission denied这样的权限报错，那么请参照上文的homebrew译注，修复/usr/local目录的所有权：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chown -R `whoami` /usr/local
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Sublime Text&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用于编写、运行和调试React Native应用，我自己用的是这个。&lt;/p&gt;

&lt;p&gt;React Native开发中推荐的一些插件：&lt;/p&gt;

&lt;p&gt;ReactJS : 支持React开发，代码提示，高亮显示&lt;/p&gt;

&lt;p&gt;Emmet ：前端开发必备。&lt;/p&gt;

&lt;p&gt;Terminal : 在sublime中打开终端并定位到当前目录，神器，mac下的快捷键为：command+shift+T&lt;/p&gt;

&lt;p&gt;react-native-snippets：react native 的代码片段&lt;/p&gt;

&lt;p&gt;当然还有Facebook提供的基于atom的&lt;a href=&quot;https://nuclide.io/&quot;&gt;Nuclide&lt;/a&gt;，&lt;a href=&quot;https://www.jetbrains.com/webstorm/&quot;&gt;webstorm&lt;/a&gt;，&lt;a href=&quot;https://www.google.com.hk/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;ved=0ahUKEwid5viAndzOAhWMFSwKHS6kCgAQFggcMAA&amp;amp;url=https%3a%2f%2fcode%2evisualstudio%2ecom%2f&amp;amp;usg=AFQjCNFJKyN71_pTGlo3tbjTpAWVghKtHg&quot;&gt;Visual Studio Code&lt;/a&gt;等编辑器。关于这几个编译器的配置推荐小伙伴可以参考这边文章&lt;a href=&quot;http://www.infoq.com/cn/articles/react-native-ide&quot;&gt;React Native 开发之 IDE 选型和配置&lt;/a&gt;，自行选择使用学习。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Watchman (推荐使用)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Watchman是由Facebook提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能（packager可以快速捕捉文件的变化从而实现实时刷新）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Flow&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://flow.org/&quot;&gt;Flow&lt;/a&gt;是一个静态的JS类型检查工具。&lt;/p&gt;

&lt;p&gt;注：你在很多示例中看到的奇奇怪怪的冒号问号，以及方法参数中像类型一样的写法，都是属于这个flow工具的语法。这一语法并不属于ES标准，只是Facebook自家的代码规范。所以新手可以直接跳过（即不需要安装这一工具，也不建议去费力学习flow相关语法）。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;以上基本就是我自己所搭建的环境，当然上面的一些工具也可以自行选择自己熟悉的。如果您有什么好的IDE欢迎交流推荐。另外，上面如果有未安装成功的小伙伴也可以留言给我，一起解决问题。&lt;/p&gt;

</description>
        <pubDate>Sat, 27 Aug 2016 02:15:06 +0800</pubDate>
        <link>http://localhost:4000/2016/08/RN-Mac%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-iOS/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/08/RN-Mac%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-iOS/</guid>
        
        <category>IDE使用及配置</category>
        
        
      </item>
    
      <item>
        <title>Sublime	配置subl命令行</title>
        <description>&lt;ul&gt;
  &lt;li&gt;如果是在默认shell环境下&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo ln -s &quot;/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl&quot; /usr/bin/subl
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;使用zsh环境的可以使用以下命令&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alias subl=&quot;'/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl'&quot;
alias nano=&quot;subl&quot;
export EDITOR=&quot;subl&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;subl-命令语法&quot;&gt;subl 命令语法&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;用法:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  subl [arguments] [files] 编辑指定的文件

  edit the given files or: subl [arguments] [directories] 打开指定的目录

  or: subl [arguments] - 编辑stdin
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;参数Arguments:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  --project : 载入指定的project

  --command : 运行指定的命令

  -n or --new-window: 打开一个新的窗口
 
  -a or --add: 添加文件夹到当前窗口
  
  -w or --wait: 返回前等待文件关闭
 
  -b or --background: 不激活该应用程序

  -s or --stay: 文件关闭后保持应用程序激活状态

  -h or --help: 显示帮助并退出

  -v or --version: 显示版本信息并退出
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;如果从标准输入–wait是隐式的。 使用–stay当文件关闭是不切换到后台控制台(只与是否有等待的文件有关) 文件名可以通过加:line或者:line:column后缀来指定打开的定位&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 24 Jun 2016 02:15:06 +0800</pubDate>
        <link>http://localhost:4000/2016/06/Sublime-%E9%85%8D%E7%BD%AEsuble%E5%91%BD%E4%BB%A4%E8%A1%8C/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/06/Sublime-%E9%85%8D%E7%BD%AEsuble%E5%91%BD%E4%BB%A4%E8%A1%8C/</guid>
        
        <category>IDE使用及配置</category>
        
        
      </item>
    
      <item>
        <title>sublime 快捷键使用</title>
        <description>&lt;p&gt;交换光标处文本：ctrl + t&lt;/p&gt;

&lt;p&gt;清屏1：command + r&lt;/p&gt;

&lt;p&gt;清屏2：ctrl + l&lt;/p&gt;

&lt;p&gt;⌘ + 数字在各 tab 标签直接来回切换&lt;/p&gt;

&lt;p&gt;选择即复制 + 鼠标中键粘贴，这个很实用&lt;/p&gt;

&lt;p&gt;⌘ + f 所查找的内容会被自动复制&lt;/p&gt;

&lt;p&gt;⌘ + d 横着分屏 / ⌘ + shift + d 竖着分屏&lt;/p&gt;

&lt;p&gt;⌘ + r = clear，而且只是换到新一屏，不会想 clear 一样创建一个空屏&lt;/p&gt;

&lt;p&gt;ctrl + u 清空当前行，无论光标在什么位置&lt;/p&gt;

&lt;p&gt;输入开头命令后 按 ⌘ + ; 会自动列出输入过的命令&lt;/p&gt;

&lt;p&gt;⌘ + shift + h 会列出剪切板历史&lt;/p&gt;

&lt;p&gt;可以在 Preferences &amp;gt; keys 设置全局快捷键调出 iterm，这个也可以用过 Alfred 实现&lt;/p&gt;
</description>
        <pubDate>Fri, 22 Apr 2016 23:15:06 +0800</pubDate>
        <link>http://localhost:4000/2016/04/sublime-%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%BD%BF%E7%94%A8/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/04/sublime-%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%BD%BF%E7%94%A8/</guid>
        
        <category>IDE使用及配置</category>
        
        
      </item>
    
  </channel>
</rss>
